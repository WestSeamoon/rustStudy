常量与不可变变量的区别：
不可以使用mut，常量永远都是不可变的
声明常量使用const关键字，它的类型必须被标注
常量可以在任何作用域内进行声明，包括全局作用域
常量只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行时才能计算出的值在程序运行期间，常量在其声明的作用域内一直有效
命名规范：rust里常量使用全大写字母，每个单词之间用下划线分开，
例如MAX_POINTS
例子const MAX_POINTX:u32=100_000；可以使用下划线增加代码可读性

数据类型
标量和复合类型
rust是静态编程语言，在编译时通常能够推断出它的具体类型
但如果可能的类型比较多（例如把String转换为整数的parse方法），就必须添加类型的标注，否则编译会报错
四个标量类型：

整数类型：u32无符号整数类型，占据32位的空间
          无符号整数以u开头，非负的
          有符号整数以i开头
          isize和usize类型的位数由程序运行的计算机架构所决定：
          如果是64位计算机就是64位
使用isize或uszize的主要场景是对某种集合进行索引操作

复合类型
Tuple:Tuple可以将多个类型的多个值放在一个类型里
      Tuple的长度是固定的：一旦声明就无法改变
      创建Tuple：在小括号里，将值用逗号分开
      Tuple中的每个位置都对应一个类型，Tuple中各元素的类型不必相同
获取Tuple的元素值
     可以使用模式匹配来解构（destructure）一个Tuple来i获取元素的值
数组：声明一个数组：在中括号里，各值用逗号分开
数组的类型：
表示形式：[类型；长度]
例如：let a:[i32;5]=[1,2,3,4,5];
另一种：如果每个元素值都相同
        let a=[3,5];相当于：let a=[3，3，3，3，3]；
